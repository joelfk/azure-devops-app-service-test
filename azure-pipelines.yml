trigger:
  - master

pr:
  - master

pool:
  vmImage: 'windows-latest'

stages:
 - stage: CreateDeploymentArtifacts
   displayName: Create Deployment Artifacts
   jobs:
    - job: CreateApiDeploymentArtifacts
      displayName: Create API Deployment Artifacts
      steps:
        - task: DotNetCoreCLI@2
          name: 'Build'
          inputs:
            command: 'build'
            projects: 'AppServiceTestApi.sln'
        - task: DotNetCoreCLI@2
          name: 'Test'
          inputs:
            command: 'test'
            projects: 'AppServiceTestApi.sln'
        - task: DotNetCoreCLI@2
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          name: 'Publish'
          inputs:
            command: publish
            publishWebProjects: true
            zipAfterPublish: false
            arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          name: 'SaveArtifact'
          inputs:
            pathtoPublish: '$(Build.ArtifactStagingDirectory)/Api'
            artifactName: apiBuildArtifact
    - job: CreateAngularDeploymentArtifacts
      displayName: Create Angular Deployment Artifacts
      steps:
        - task: Npm@1
          name: 'InstallDependencies'
          inputs:
            command: 'install'
            workingDir: './Client'
        - task: Npm@1
          name: 'Lint'
          inputs:
            command: 'custom'
            customCommand: 'run lint'
            workingDir: './Client'
        - task: Npm@1
          name: 'Test'
          inputs:
            command: 'custom'
            customCommand: 'run test'
            workingDir: './Client'
        - task: Npm@1
          name: 'Publish'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          inputs:
            command: 'custom'
            customCommand: 'run build --prod'
            workingDir: './Client'
        - task: PublishBuildArtifacts@1
          name: 'SaveArtifact'
          condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
          inputs:
            pathtoPublish: '$(Build.SourcesDirectory)/Client/dist/client'
            artifactName: angularBuildArtifact
    - job: PublishDeploymentArtifacts
      displayName: Publish Deployment Artifacts
      dependsOn:
        - CreateApiDeploymentArtifacts
        - CreateAngularDeploymentArtifacts
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      steps:
        - task: DownloadBuildArtifacts@0
          name: 'DownloadApiBuildArtifacts'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'apiBuildArtifact'
            downloadPath: '$(Build.ArtifactStagingDirectory)'
        - task: DownloadBuildArtifacts@0
          name: 'DownloadAngularBuildArtifacts'
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'angularBuildArtifact'
            downloadPath: '$(Build.ArtifactStagingDirectory)'
        - task: CopyFiles@2
          name: 'Copy'
          inputs:
            sourceFolder: '$(Build.ArtifactStagingDirectory)/angularBuildArtifact'
            targetFolder: '$(Build.ArtifactStagingDirectory)/apiBuildArtifact/wwwroot'
        - task: ArchiveFiles@2
          name: 'Zip'
          inputs:
           rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/apiBuildArtifact'
           includeRootFolder: false
           archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        - task: PublishBuildArtifacts@1
          name: 'Publish'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            ArtifactName: 'buildArtifact'
            publishLocation: 'Container'

 - stage: DeployToTestEnvironment
   displayName: Deploy To Test Environment
   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
   jobs:
    - deployment: DeployWeb
      displayName: Deploy Web App
      environment:
        name: '$(test-app-service-test-environment-name)'
      strategy:
        runOnce:
          deploy:
            steps:
             - task: DownloadBuildArtifacts@0
               name: 'DownloadBuildArtifacts'
               inputs:
                 buildType: 'current'
                 downloadType: 'single'
                 artifactName: 'buildArtifact'
                 downloadPath: '$(System.ArtifactsDirectory)'
             - task: AzureRmWebAppDeployment@4
               inputs:
                 ConnectionType: 'AzureRM'
                 azureSubscription: '$(test-app-service-test-connection-name)'
                 appType: 'webApp'
                 WebAppName: '$(test-app-service-test-app-name)'
                 package: '$(System.ArtifactsDirectory)/**/$(Build.BuildId).zip'